export const tasks_json: any = { "version": "2.0.0", "tasks": [{ "label": "Make", "type": "shell", "windows": { "command": "powershell" }, "linux": { "command": "bash" }, "osx": { "command": "bash" }, "args": [ "-c", "clear && make" ], "problemMatcher": [] }, { "label": "Make Clean", "type": "shell", "windows": { "command": "powershell" }, "linux": { "command": "bash" }, "osx": { "command": "bash" }, "args": [ "-c", "clear && make clean" ], "problemMatcher": [] }, { "label": "Run", "type": "shell", "windows": { "command": "powershell" }, "linux": { "command": "bash" }, "osx": { "command": "bash" }, "args": [ "-c", "clear && make -i -s && make run -i -s ${input:args}" ], "problemMatcher": [], "group": { "kind": "build", "isDefault": true } }], "inputs": [{ "id": "args", "type": "promptString", "description": "Enter Program Arguments Here: " }] };
export const settings_json: any = { "code-runner.preserveFocus": false, "code-runner.runInTerminal": true, "code-runner.fileDirectoryAsCwd": false, "code-runner.clearPreviousOutput": true, "code-runner.defaultLanguage": "cpp", "code-runner.executorMap": { "cpp": "clear && make -i -s && printf \"%s\" \"Enter Program Arguments Here: \" && make run -i -s $(read -e) && echo \"\\c%s\"" }, "code-runner.saveAllFilesBeforeRun": true, "editor.formatOnPaste": true, "editor.formatOnSave": true };
export const launch_json: any = { "version": "0.2.0", "configurations": [{ "name": "Debug", "type": "cppdbg", "request": "launch", "program": "${workspaceFolder}/bin/${workspaceFolderBasename}", "args": [ "${input:args}" ], "stopAtEntry": false, "cwd": "${workspaceRoot}", "environment": [], "externalConsole": true, "preLaunchTask": "Make", "linux": { "MIMode": "gdb" }, "osx": { "MIMode": "gdb" }, "windows": { "MIMode": "gdb" } }], "inputs": [{ "id": "args", "type": "promptString", "description": "Enter Program Arguments Here: " }] };
export const clang_format: string = "BasedOnStyle: LLVM\nAccessModifierOffset: '0'\nAlignConsecutiveAssignments: 'true'\nAlignEscapedNewlines: DontAlign\nAlignOperands: 'true'\nBreakBeforeBraces: Attach\nConstructorInitializerAllOnOneLineOrOnePerLine: 'true'\nContinuationIndentWidth: '4'\nDerivePointerAlignment: 'true'\nIndentCaseLabels: 'true'\nIndentWidth: '4'\nIndentWrappedFunctionNames: 'true'\nNamespaceIndentation: All\nTabWidth: '1'\nColumnLimit: '175'";
export const makefile_c: string = 'CC\t\t:= gcc\nCFLAGS\t:= -Wall -Wextra -g\n\nBIN\t\t:= bin\nSRC\t\t:= src\nINCLUDE\t:= include\nLIB\t\t:= lib\n\nLIBRARIES\t:=\n\nifeq ($(OS),Windows_NT)\nEXECUTABLE\t:= $(PROJECT_NAME).exe\nelse\nEXECUTABLE\t:= $(PROJECT_NAME)\nendif\n\nSOURCEDIRS\t:= $(shell find $(SRC) -type d)\nINCLUDEDIRS\t:= $(shell find $(INCLUDE) -type d)\nLIBDIRS\t\t:= $(shell find $(LIB) -type d)\n\nCINCLUDES\t:= $(patsubst %,-I%, $(INCLUDEDIRS:%/=%))\nCLIBS\t\t:= $(patsubst %,-L%, $(LIBDIRS:%/=%))\n\nSOURCES\t\t:= $(wildcard $(patsubst %,%/*.c, $(SOURCEDIRS)))\nOBJECTS\t\t:= $(SOURCES:.c=.o)\n\n\nall: $(BIN)/$(EXECUTABLE)\n\n.PHONY: clean\nclean:\n\t-$(RM) $(BIN)/$(EXECUTABLE)\n\t-$(RM) $(OBJECTS)\n\n\nrun: all\n\t./$(BIN)/$(EXECUTABLE)\n\n$(BIN)/$(EXECUTABLE): $(OBJECTS)\n\t$(CC) $(CFLAGS) $(CINCLUDES) $(CLIBS) $^ -o $@ $(LIBRARIES)';
export const makefile_cpp: string = "CC\t\t\t:= g++\nCC_FLAGS\t:= -w -g\nBUILD\t\t:= .build\nBIN\t\t\t:= bin\nINCLUDE\t\t:= include\nLIB\t\t\t:= lib\nSRC\t\t\t:= src\nSOURCES\t\t:= $(wildcard $(SRC)/*.cpp)\nOBJECTS\t\t:= $(BUILD)/$(notdir $(SOURCES:.cpp=.o))\nNULL\t\t:=\nSPACE\t\t:= $(NULL) $(NULL)\nEXECUTABLE\t:= $(notdir $(subst $(SPACE),\\ ,$(CURDIR)))\nLIBRARIES\t:=\nARGS\t\t:= $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))\n$(eval $(ARGS):exit;@:)\n\n$(BUILD)/%.o: $(SRC)/%.cpp\n\t$(CC) -c $(CC_FLAGS) $< -o $@\n\n$(BIN)/$(EXECUTABLE): $(OBJECTS)\n\t$(CC) $(CC_FLAGS) -I $(INCLUDE) -L $(LIB) $^ -o $(subst $(SPACE),\\ ,$@) $(LIBRARIES)\n\nrun:\n\t$(BIN)/$(EXECUTABLE) $(ARGS)\n\nclean:\n\t$(RM) -r $(BUILD)/*\n\t$(RM) $(BIN)/$(EXECUTABLE)\n\nexit:\n\t@true";
export const gitignore_c: string = "# Prerequisites\n*.d\n\n# Object files\n.build/\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\nbin/\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf";
export const gitignore_cpp: string = "# Prerequisites\n*.d\n\n# Compiled Object files\n.build/\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\nbin/\n*.exe\n*.out\n*.app";
export const main_cpp: string = '#include <iostream>\n\nint main(int argc, char *argv[]) {\n\tstd::cout << "Hello World!" << std::endl;\n}';
export const main_c: string = '#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n\tprintf("Hello World");\n\n\treturn(0);\n}';
export const directories: string[] = new Array(".build", ".vscode", "bin", "include", "lib", "src");
